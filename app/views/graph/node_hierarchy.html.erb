 <input type='hidden' id='node_id' value=<%= @node_id %> >

 <div class="row svgrow">

        <svg  version="1.2" xmlns="http://www.w3.org/2000/svg" viewBox="00 000 10000 1000">
            
        </svg>
</div>



<% content_for :javascript do %>
  <script type="text/javascript">


    $( document ).ready(function() {
      init()

    });

    function init() {
      var node_id = $('#node_id').val();
      node_id = parseInt(node_id)
      get_node_data(node_id);
    }

    var g=null;

    // based on new nodes returned from ajax, return only those that are not already in the graph.
    function nodes_to_add(new_nodes) {
      var results = [];
      for (var i=0; i < new_nodes.length; i++) {
        if (g.node( new_nodes[i].account_id ) === undefined) {
         results.push( new_nodes[i])
         console.log('adding node: ' + new_nodes[i].account_id)
        }
      }

      return results
    }


    function get_node_data(node_id) {
      $.get('/node_data/' + node_id, function(results){
              var data = results.nodes
              gClickedOnNode = node_id
              //console.log('reuslts ' + JSON.stringify(data) )

              // clean up the ui 
              $(".tipsy").remove(); // tips
              d3.selectAll("svg > *").remove() // the graph

              // Create a new directed graph
              g = new dagreD3.graphlib.Graph().setGraph({});
      

              generate_nodes(g, data, node_id)
              generate_links2(g, data, results.edges, results.uniq_nodes, results.node_ids)
          

              // Create the renderer
              var render = new dagreD3.render();

              // Set up an SVG group so that we can translate the final graph.
              var svg = d3.select("svg"),
                  inner = svg.append("g");

              // Set up zoom support
              var zoom = d3.zoom()
                  .on("zoom", function() {
                    inner.attr("transform", d3.event.transform);
                  });
              svg.call(zoom);


              // Simple function to style the tooltip for the given node.

              var styleTooltip = function(name, description) {
                return "<p class='name'>" + name + "</p><p class='description'>Account Type: " + description + "</p>";
              };


              // Run the renderer. This is what draws the final graph.
              render(inner, g);

              inner.selectAll("g.node")
                .attr("title", function(v) { return styleTooltip(v, g.node(v).description) })
                .each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });


              inner.selectAll("g.node").on("mouseover", function(d,i) {
                  var nodes = g.predecessors(d)
                  console.log("on mouse account id: " + nodes); 
              });

              inner.selectAll("g.node").on("click", function(d,i) {
                  console.log("on click 3account id: " + d + ' ' + i); 
                  
                  get_node_data_on_click( parseInt(d) )
              });

              // Center the graph
              var initialScale = 0.70;
              svg.call(zoom.transform, d3.zoomIdentity.translate((svg.attr("width") - g.graph().width * initialScale) / 2, 20).scale(initialScale));

              svg.attr('height', g.graph().height * initialScale + 40);
                
              
            })
      }
    

    function update_node_class(node_id, new_class) {
                var n = g.node( node_id )
                var in_edges = g.inEdges(node_id)
                var out_edges = g.outEdges(node_id)
                g.removeNode(node_id)

                if (new_class === '') {
                  g.setNode( node_id, {  description: '', style: n.style} )
                }
                else {
                  g.setNode( node_id, {  description: '', class: new_class, style: n.style} )
                }
                
                for (var i=0;i < in_edges.length; i++) {
                    var t = in_edges[i]
                  g.setEdge( t.v, t.w, {})
                }
                for (var i=0;i < out_edges.length; i++) {
                    var t = out_edges[i]
                  g.setEdge( t.v, t.w, {})
                }
    
    }
    
    var gClickedOnNode = null;

    function get_node_data_on_click(node_id) {
      console.log('get_node_data_on_click')

      $.get('/node_data/' + node_id, function(results){
        console.log('get_node_data_on_click results')
              var data = results.nodes
              // 1 == parent
              if (results.nodes.length === 1) {
                alert('No children found for this node')
              }
              //console.log('reuslts ' + JSON.stringify(data) )
              console.log('gClickedOnNode: ' + gClickedOnNode)
              if (gClickedOnNode !== null ) {
                update_node_class(gClickedOnNode, '')
                gClickedOnNode = node_id
              }
              else {
                gClickedOnNode = node_id
              }

              update_node_class(node_id, 'selected_node')

              // clean up the ui 
              var new_nodes = nodes_to_add(results.nodes)
              // only keep the nodes we will deal with
              console.log('nodes_to_add: ' + new_nodes)

              $(".tipsy").remove(); // tips
              d3.selectAll("svg > *").remove() // the graph

              
              if (new_nodes.length > 0) {
                generate_nodes(g, new_nodes, node_id)
                generate_links2(g, data, results.edges, results.uniq_nodes, results.node_ids)
              }

              // are we at the last child?
              if (g.successors(node_id).length === 0) {
                alert('No children found')
              }

              // are we at the last child?
              if (g.predecessors(node_id).length === 0) {
                alert('No parents found')
              }

              // Create the renderer
              var render = new dagreD3.render();

              // Set up an SVG group so that we can translate the final graph.
              var svg = d3.select("svg"),
                  inner = svg.append("g");

              // Set up zoom support
              var zoom = d3.zoom()
                  .on("zoom", function() {
                    inner.attr("transform", d3.event.transform);
                  });
              svg.call(zoom);


              // Simple function to style the tooltip for the given node.

              var styleTooltip = function(name, description) {
                return "<p class='name'>" + name + "</p><p class='description'>Account Type: " + description + "</p>";
              };


              // Run the renderer. This is what draws the final graph.
              render(inner, g);

              inner.selectAll("g.node")
                .attr("title", function(v) { return styleTooltip(v, g.node(v).description) })
                .each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });


              inner.selectAll("g.node").on("mouseover", function(d,i) {
                  var nodes = g.predecessors(d)
                  console.log("on mouse account id: " + nodes); 
              });

              inner.selectAll("g.node").on("click", function(d,i) {
                  console.log("on click2 account id: " + d + ' ' + i); 
                  
                  get_node_data_on_click( parseInt(d) )
              });

              // Center the graph
              var initialScale = 0.70;
              svg.call(zoom.transform, d3.zoomIdentity.translate((svg.attr("width") - g.graph().width * initialScale) / 2, 20).scale(initialScale));

              // svg.attr('height', g.graph().height * initialScale + 40);

              var xCenterOffset = (svg.attr("width") - g.graph().width) / 2;
              inner.attr("transform", "translate(" + xCenterOffset + ", 20)");
              svg.attr("height", g.graph().height + 40);                
              
            })
      }
    
    function generate_nodes(g, nodes, node_id) {
      var states = {}
      for (var i =0; i < nodes.length; i++) {
        var node = nodes[i]
        //onsole.log( JSON.stringify(node))
        states[ node.account_id ] = {  description: node.account_type, style: "fill: " + get_fill_color( node.account_type )}

        if (node_id === node.account_id) {
          states[ node.account_id ] = {  description: node.parent_id, class: 'selected_node', style: "fill: " + get_fill_color( node.account_type )}
        }
      }

      // Add states to the graph, set labels, and style
      Object.keys(states).forEach(function(state) {
        var value = states[state];
        value.label = state;
        value.rx = value.ry = 5;
        g.setNode(state, value);
      });

    }

    function generate_links2(g, nodes, edges, uniq_node_ids, node_ids) {
      //console.log('uniq_node_ids: ' + uniq_node_ids)
      //console.log('node_ids: ' + node_ids)
      
      for (var i =0; i < nodes.length; i++) {
          var node = nodes[i]
          //if ([22936,22932,22934,22935,22937,22938,22939,22940,22942,22943].includes(node.account_id)) {
          if (node_ids.includes(node.account_id) && node_ids.includes(node.parent_id)) {
            //console.log('edge: ' + JSON.stringify(node) )
           g.setEdge( node.parent_id, node.account_id, {})
          }
      } 
         
    }
    

function get_fill_color(node_type)
{
  switch(node_type) {
    case 1: return 'red' 
    case 2: return 'yellow' 
    case 3: return 'green'
    case 4: return 'white'
    case 5: return 'pink'
    case 6: return 'orange'
    case 7: return 'lightgreen'
    case 8: return 'lightblue'
    case 9: return 'salmon'
    case 10: return 'lightpurple'
  }
  
}
  </script>
<% end %>