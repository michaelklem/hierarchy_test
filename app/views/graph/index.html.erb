 <div class="row svgrow">

        <svg  version="1.2" xmlns="http://www.w3.org/2000/svg" viewBox="00 000 10000 1000">
            
        </svg>
</div>





<div style='display:none;' id='nodes'><%= @nodes.to_json %></div>
<div style='display:none;' id='node_ids'><%= @node_ids.to_json %></div>
<div style='display:none;' id='edges'><%= @edges.to_json %></div>

<% content_for :javascript do %>
  <script type="text/javascript">


    $( document ).ready(function() {
      //dagre_test()
      //dagre_test2()
      dagre_test3()

    });


var g = null;
var svg = null;
  function dagre_test3() {
// Create a new directed graph
g = new dagreD3.graphlib.Graph().setGraph({});

// States and transitions from RFC 793
var states = {};
var nodes_str = $('#nodes').text()
var nodes = JSON.parse( nodes_str )
var new_states = {}
for (var i =0; i < nodes.length; i++) {
  var node_type = nodes[i][1]
  new_states[ nodes[i][0] ] = {  description: node_type, style: "fill: " + get_fill_color( node_type)}
}

states = new_states

// Add states to the graph, set labels, and style
Object.keys(states).forEach(function(state) {
  var value = states[state];
  value.label = state;
  value.rx = value.ry = 5;
  g.setNode(state, value);
});


//var node_ids_str = $('#node_ids').text()
//var node_ids = JSON.parse( node_ids_str )


var edges_str = $('#edges').text()
var edges = JSON.parse( edges_str )
var new_states = {}
for (var i =0; i < edges.length; i++) {
  var temp = edges[i]
//  if (temp.parent_id !== null && (node_ids.includes(temp.parent_id))) {
  if (temp.parent_id !== null) {
    //console.log('par: ' + temp.parent_id + ' a: ' + temp.account_id)
    g.setEdge( temp.parent_id, temp.account_id, {})
  }
}


/*
// Set up the edges
g.setEdge("CLOSED",     "LISTEN",     { label: "open" });
g.setEdge("LISTEN",     "SYN RCVD",   { label: "rcv SYN" });
g.setEdge("LISTEN",     "SYN SENT",   { label: "send" });
g.setEdge("LISTEN",     "CLOSED",     { label: "close" });
g.setEdge("SYN RCVD",   "FINWAIT-1",  { label: "close" });
g.setEdge("SYN RCVD",   "ESTAB",      { label: "rcv ACK of SYN" });
g.setEdge("SYN SENT",   "SYN RCVD",   { label: "rcv SYN" });
g.setEdge("SYN SENT",   "ESTAB",      { label: "rcv SYN, ACK" });
g.setEdge("SYN SENT",   "CLOSED",     { label: "close" });
g.setEdge("ESTAB",      "FINWAIT-1",  { label: "close" });
g.setEdge("ESTAB",      "CLOSE WAIT", { label: "rcv FIN" });
g.setEdge("FINWAIT-1",  "FINWAIT-2",  { label: "rcv ACK of FIN" });
g.setEdge("FINWAIT-1",  "CLOSING",    { label: "rcv FIN" });
g.setEdge("CLOSE WAIT", "LAST-ACK",   { label: "close" });
g.setEdge("FINWAIT-2",  "TIME WAIT",  { label: "rcv FIN" });
g.setEdge("CLOSING",    "TIME WAIT",  { label: "rcv ACK of FIN" });
g.setEdge("LAST-ACK",   "CLOSED",     { label: "rcv ACK of FIN" });
g.setEdge("TIME WAIT",  "CLOSED",     { label: "timeout=2MSL" });
g.setEdge("a1",  "CLOSED",     { label: "timeout=2MSL" });
g.setEdge("a1",  "b1",     {  });
g.setEdge("a2",  "b1",     {  });
*/
// Create the renderer
var render = new dagreD3.render();

// Set up an SVG group so that we can translate the final graph.
 svg = d3.select("svg"),
    inner = svg.append("g");

// Set up zoom support
var zoom = d3.zoom()
    .on("zoom", function() {
      inner.attr("transform", d3.event.transform);
    });
svg.call(zoom);

// Simple function to style the tooltip for the given node.

var styleTooltip = function(name, description) {
  return "<p class='name'>" + name + "</p><p class='description'>Account Type: " + description + "</p>";
};


// Run the renderer. This is what draws the final graph.
render(inner, g);

inner.selectAll("g.node")
  .attr("title", function(v) { return styleTooltip(v, g.node(v).description) })
  .each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });

// Center the graph
var initialScale = 0.70;
svg.call(zoom.transform, d3.zoomIdentity.translate((svg.attr("width") - g.graph().width * initialScale) / 2, 20).scale(initialScale));

svg.attr('height', g.graph().height * initialScale + 40);

mouse_over_effect(svg)
  }

  function mouse_over_effect(svg) {
    //highlight_edges(svg)
    highlight_nodes(svg)
  }
 
  function highlight_nodes(svg) {
console.log('afdsdfwef')
//highlight nodes	
var allnodes = svg.selectAll("g.nodes rect");
  var edgelabels = svg.selectAll(".edgeLabel");
  var allnodes = svg.selectAll("g.nodes rect");
  var testpath = d3.selectAll('g.edgePath path');
  var onmousepath = d3.selectAll('g.edgePath');
   var allpathes = onmousepath.select('.path');

var node = svg.selectAll(".node") ;
var allnodessel = allnodes.select("g.nodes title");     /* node box*/
var labelsel = svg.selectAll("g.nodes text");           /* select the labels instead the frame of the labels */
      node
	   .on("mouseover",function(d,id){
        allpathes.style("opacity", 0.2);                                     //hide all pathes
        allnodes.style("opacity", 0.2);                                      //hide all nodes
        edgelabels.style("opacity", 0.2);                                    //hide all link labels  
        var elemtosearch = d; 
        var testit = g.nodeEdges(d);
        var selectit = g.neighbors(d);	   
        allpathes.each(function(d,id){                                       //search all pathes
          var i;
          for (i = 0; i < testit.length; i++){                              // in testit we have all neighbors of the actual node     
            if ((testit[i].w == d.w && elemtosearch == d.w) || (testit[i].v == d.v && elemtosearch == d.v)) {                                      //if the child is the actual hovered make it visibile 
              var labelfound = id
              d3.select(this).style("opacity",1);
              edgelabels.each(function(d,id){
                if (labelfound == id) d3.select(this).style("opacity", 1);   
              })
            }  
          }
		    })
        
        allnodes.each(function(d,id){ 
//	          testit.each(function(d){ 
			  var i;
			  for (i = 0; i < d.length; i++){
                 if (selectit[i] == d) {
				    d3.select(this).style("opacity",1);                                 
				   }				
				}
              if (elemtosearch == d) d3.select(this).style("opacity",1);     // the actual node we hover				
		   })
	   })
	   .on("mouseout",function(d,id){
		   allnodes.style("opacity", 1);                                      // 
		   allpathes.style("opacity", 1);
		   edgelabels.style("opacity", 1); 
	   }); 	   
  
  }
  
  function highlight_edges(svg) {

//highlight edges
  var edgelabels = svg.selectAll(".edgeLabel");
  var allnodes = svg.selectAll("g.nodes rect");
  var testpath = d3.selectAll('g.edgePath path');
  var onmousepath = d3.selectAll('g.edgePath');
   var allpathes = onmousepath.select('.path');
   allpathes
      .on("mouseout",function(d,id){
		 edgelabels.style("opacity", 1);
	     allpathes.style("opacity", 1);       /* set all edges to opacity 1 */
         allnodes.style("opacity", 1);       /* set all nodes visibillity */
		 })
      .on("mouseover",function(d,id){
	  	 var labellikepath = id;
	     edgelabels.style("opacity", 0.2);
         allpathes.style("opacity", 0.2);      /* set all edges opacity 0.2 */
		 allnodes.style("opacity", 0.2); 
		 edgelabels.each(function(d,id){                     /* first path is the first label, second path second label, etc.. */
		    if (id === labellikepath) {
			   d3.select(this).style("opacity", 1);
            }
		 })	
	     d3.select(this).style("opacity", 1);    /*  just set the actual edge to opacity 1 */
		 var par = d.v
		 var chi = d.w
		 allnodes.each(function(d,id){
		    var i;
			for (i = 0; i < d.length; i++){
                if (par == d) d3.select(this).style("opacity",1);   //make alle neighbors visible 
			    if (chi == d) d3.select(this).style("opacity",1);
				}
			})
		 });
	}

function get_fill_color(node_type)
{
  switch(node_type) {
    case 1: return 'red' 
    case 2: return 'yellow' 
    case 3: return 'green'
    case 4: return 'white'
    case 5: return 'pink'
    case 6: return 'orange'
    case 7: return 'lightgreen'
    case 8: return 'lightblue'
    case 9: return 'salmon'
    case 10: return 'lightpurple'
  }
  
}
  function dagre_test() {
// Create a new directed graph
var g = new dagreD3.graphlib.Graph().setGraph({});

// States and transitions from RFC 793
var states = {
  CLOSED: {
    description: "represents no connection state at all.",
    style: "fill: #f77"
  },

  LISTEN: {
    description: "represents waiting for a connection request from any " +
                 "remote TCP and port."
  },

  "SYN SENT": {
    description: "represents waiting for a matching connection " +
                 "request after having sent a connection request."
  },

  "SYN RCVD": {
    description: "represents waiting for a confirming connection " +
                 "request acknowledgment after having both received and sent a " +
                 "connection request."
  },


  ESTAB: {
    description: "represents an open connection, data received " +
                 "can be delivered to the user.  The normal state for the data " +
                 "transfer phase of the connection.",
    style: "fill: #7f7"
  },

  "FINWAIT-1": {
    description: "represents waiting for a connection termination " +
                 "request from the remote TCP, or an acknowledgment of the " +
                 "connection termination request previously sent."

  },

  "FINWAIT-2": {
    description: "represents waiting for a connection termination " +
                 "request from the remote TCP."
  },


  "CLOSE WAIT": {
    description: "represents waiting for a connection termination " +
                 "request from the local user."
  },

  CLOSING: {
    description: "represents waiting for a connection termination " +
                 "request acknowledgment from the remote TCP."
  },

  "LAST-ACK": {
    description: "represents waiting for an acknowledgment of the " +
                 "connection termination request previously sent to the remote " +
                 "TCP (which includes an acknowledgment of its connection " +
                 "termination request)."
  },

  "TIME WAIT": {
    description: "represents waiting for enough time to pass to be " +
                 "sure the remote TCP received the acknowledgment of its " +
                 "connection termination request."
  },

  "a1":{
    description: ''
  },
  "a2":{
    description: ''
  },
  "b1":{
    description: ''
  },
  
};

// Add states to the graph, set labels, and style
Object.keys(states).forEach(function(state) {
  var value = states[state];
  value.label = state;
  value.rx = value.ry = 5;
  g.setNode(state, value);
});


// Set up the edges
g.setEdge("CLOSED",     "LISTEN",     { label: "open" });
g.setEdge("LISTEN",     "SYN RCVD",   { label: "rcv SYN" });
g.setEdge("LISTEN",     "SYN SENT",   { label: "send" });
g.setEdge("LISTEN",     "CLOSED",     { label: "close" });
g.setEdge("SYN RCVD",   "FINWAIT-1",  { label: "close" });
g.setEdge("SYN RCVD",   "ESTAB",      { label: "rcv ACK of SYN" });
g.setEdge("SYN SENT",   "SYN RCVD",   { label: "rcv SYN" });
g.setEdge("SYN SENT",   "ESTAB",      { label: "rcv SYN, ACK" });
g.setEdge("SYN SENT",   "CLOSED",     { label: "close" });
g.setEdge("ESTAB",      "FINWAIT-1",  { label: "close" });
g.setEdge("ESTAB",      "CLOSE WAIT", { label: "rcv FIN" });
g.setEdge("FINWAIT-1",  "FINWAIT-2",  { label: "rcv ACK of FIN" });
g.setEdge("FINWAIT-1",  "CLOSING",    { label: "rcv FIN" });
g.setEdge("CLOSE WAIT", "LAST-ACK",   { label: "close" });
g.setEdge("FINWAIT-2",  "TIME WAIT",  { label: "rcv FIN" });
g.setEdge("CLOSING",    "TIME WAIT",  { label: "rcv ACK of FIN" });
g.setEdge("LAST-ACK",   "CLOSED",     { label: "rcv ACK of FIN" });
g.setEdge("TIME WAIT",  "CLOSED",     { label: "timeout=2MSL" });
g.setEdge("a1",  "CLOSED",     { label: "timeout=2MSL" });
g.setEdge("a1",  "b1",     {  });
g.setEdge("a2",  "b1",     {  });

// Create the renderer
var render = new dagreD3.render();

// Set up an SVG group so that we can translate the final graph.
 svg = d3.select("svg"),
    inner = svg.append("g");

// Set up zoom support
var zoom = d3.zoom()
    .on("zoom", function() {
      inner.attr("transform", d3.event.transform);
    });
//svg.call(zoom);

// Simple function to style the tooltip for the given node.

var styleTooltip = function(name, description) {
  return "<p class='name'>" + name + "</p><p class='description'>" + description + "</p>";
};


// Run the renderer. This is what draws the final graph.
render(inner, g);

inner.selectAll("g.node")
  .attr("title", function(v) { return styleTooltip(v, g.node(v).description) })
  .each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });

// Center the graph
var initialScale = 0.75;
svg.call(zoom.transform, d3.zoomIdentity.translate((svg.attr("width") - g.graph().width * initialScale) / 2, 20).scale(initialScale));

svg.attr('height', g.graph().height * initialScale + 40);
  }
  





  function dagre_test2() {
// Create a new directed graph
var g = new dagreD3.graphlib.Graph().setGraph({});

// States and transitions from RFC 793
var states = {
  CLOSED: {
    description: "represents no connection state at all.",
    style: "fill: #f77"
  },

  LISTEN: {
    description: "represents waiting for a connection request from any " +
                 "remote TCP and port."
  },

  "SYN SENT": {
    description: "represents waiting for a matching connection " +
                 "request after having sent a connection request."
  },

  "SYN RCVD": {
    description: "represents waiting for a confirming connection " +
                 "request acknowledgment after having both received and sent a " +
                 "connection request."
  },


  ESTAB: {
    description: "represents an open connection, data received " +
                 "can be delivered to the user.  The normal state for the data " +
                 "transfer phase of the connection.",
    style: "fill: #7f7"
  },

  "FINWAIT-1": {
    description: "represents waiting for a connection termination " +
                 "request from the remote TCP, or an acknowledgment of the " +
                 "connection termination request previously sent."

  },

  "FINWAIT-2": {
    description: "represents waiting for a connection termination " +
                 "request from the remote TCP."
  },


  "CLOSE WAIT": {
    description: "represents waiting for a connection termination " +
                 "request from the local user."
  },

  CLOSING: {
    description: "represents waiting for a connection termination " +
                 "request acknowledgment from the remote TCP."
  },

  "LAST-ACK": {
    description: "represents waiting for an acknowledgment of the " +
                 "connection termination request previously sent to the remote " +
                 "TCP (which includes an acknowledgment of its connection " +
                 "termination request)."
  },

  "TIME WAIT": {
    description: "represents waiting for enough time to pass to be " +
                 "sure the remote TCP received the acknowledgment of its " +
                 "connection termination request."
  }
};

// Add states to the graph, set labels, and style
Object.keys(states).forEach(function(state) {
  var value = states[state];
  value.label = state;
  value.rx = value.ry = 5;
  g.setNode(state, value);
});

// Set up the edges
g.setEdge("CLOSED",     "LISTEN",     { label: "open" });
g.setEdge("LISTEN",     "SYN RCVD",   { label: "rcv SYN" });
g.setEdge("LISTEN",     "SYN SENT",   { label: "send" });
g.setEdge("LISTEN",     "CLOSED",     { label: "close" });
g.setEdge("SYN RCVD",   "FINWAIT-1",  { label: "close" });
g.setEdge("SYN RCVD",   "ESTAB",      { label: "rcv ACK of SYN" });
g.setEdge("SYN SENT",   "SYN RCVD",   { label: "rcv SYN" });
g.setEdge("SYN SENT",   "ESTAB",      { label: "rcv SYN, ACK" });
g.setEdge("SYN SENT",   "CLOSED",     { label: "close" });
g.setEdge("ESTAB",      "FINWAIT-1",  { label: "close" });
g.setEdge("ESTAB",      "CLOSE WAIT", { label: "rcv FIN" });
g.setEdge("FINWAIT-1",  "FINWAIT-2",  { label: "rcv ACK of FIN" });
g.setEdge("FINWAIT-1",  "CLOSING",    { label: "rcv FIN" });
g.setEdge("CLOSE WAIT", "LAST-ACK",   { label: "close" });
g.setEdge("FINWAIT-2",  "TIME WAIT",  { label: "rcv FIN" });
g.setEdge("CLOSING",    "TIME WAIT",  { label: "rcv ACK of FIN" });
g.setEdge("LAST-ACK",   "CLOSED",     { label: "rcv ACK of FIN" });
g.setEdge("TIME WAIT",  "CLOSED",     { label: "timeout=2MSL" });

// Create the renderer
var render = new dagreD3.render();

// Set up an SVG group so that we can translate the final graph.
 svg = d3.select("svg"),
    inner = svg.append("g");

// Set up zoom support
var zoom = d3.zoom()
    .on("zoom", function() {
      inner.attr("transform", d3.event.transform);
    });
svg.call(zoom);

// Simple function to style the tooltip for the given node.
var styleTooltip = function(name, description) {
  return "<p class='name'>" + name + "</p><p class='description'>" + description + "</p>";
};

// Run the renderer. This is what draws the final graph.
render(inner, g);

inner.selectAll("g.node")
  .attr("title", function(v) { return styleTooltip(v, g.node(v).description) })
  .each(function(v) { $(this).tipsy({ gravity: "w", opacity: 1, html: true }); });

// Center the graph
var initialScale = 0.75;
svg.call(zoom.transform, d3.zoomIdentity.translate((svg.attr("width") - g.graph().width * initialScale) / 2, 20).scale(initialScale));

svg.attr('height', g.graph().height * initialScale + 40);
  }
  
  
  
  </script>
<% end %>
